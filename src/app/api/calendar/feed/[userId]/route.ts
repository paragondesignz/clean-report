import { NextRequest, NextResponse } from 'next/server'
import { createServerClient } from '@/lib/supabase-client'

export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ userId: string }> }
) {
  try {
    const { userId } = await params

    if (!userId) {
      return new NextResponse('User ID is required', { status: 400 })
    }

    const supabase = createServerClient()
    
    // Get user's scheduled jobs with client info
    const { data: jobs, error: jobsError } = await supabase
      .from('jobs')
      .select(`
        id,
        title,
        description,
        scheduled_date,
        scheduled_time,
        status,
        client_id,
        clients (
          name,
          address,
          email
        )
      `)
      .eq('user_id', userId)
      .not('scheduled_date', 'is', null)
      .not('scheduled_time', 'is', null)
      .gte('scheduled_date', new Date().toISOString().split('T')[0])
      .order('scheduled_date', { ascending: true })

    if (jobsError) {
      return new NextResponse('Failed to fetch jobs', { status: 500 })
    }

    // Generate iCal content
    const icalContent = generateJobsICal(jobs || [])

    return new NextResponse(icalContent, {
      headers: {
        'Content-Type': 'text/calendar; charset=utf-8',
        'Content-Disposition': 'inline; filename="clean-report-jobs.ics"',
        'Cache-Control': 'no-cache, no-store, must-revalidate',
        'Pragma': 'no-cache',
        'Expires': '0'
      }
    })

  } catch (error) {
    console.error('Calendar feed error:', error)
    return new NextResponse('Failed to generate calendar feed', { status: 500 })
  }
}

function generateJobsICal(jobs: any[]): string {
  const now = new Date()
  const icalHeader = [
    'BEGIN:VCALENDAR',
    'VERSION:2.0',
    'PRODID:-//Clean Report//Calendar Integration//EN',
    'CALSCALE:GREGORIAN',
    'METHOD:PUBLISH',
    'X-WR-CALNAME:Clean Report Jobs',
    'X-WR-TIMEZONE:' + Intl.DateTimeFormat().resolvedOptions().timeZone,
    'X-WR-CALDESC:Automatically generated calendar feed from Clean Report CRM'
  ]

  const icalFooter = ['END:VCALENDAR']

  const events = jobs.map(job => {
    if (!job.scheduled_date || !job.scheduled_time) return ''
    
    const startTime = new Date(`${job.scheduled_date}T${job.scheduled_time}`)
    const endTime = new Date(startTime.getTime() + 2 * 60 * 60 * 1000) // 2 hours duration
    
    const formatDate = (date: Date) => {
      return date.toISOString().replace(/[-:]/g, '').split('.')[0] + 'Z'
    }

    const client = job.clients
    const summary = `ðŸ§¹ ${job.title}${client ? ` - ${client.name}` : ''}`
    const description = [
      job.description || '',
      '',
      `Status: ${job.status || 'Scheduled'}`,
      `Job ID: ${job.id}`,
      '',
      'Generated by Clean Report CRM'
    ].join('\\n')

    return [
      'BEGIN:VEVENT',
      `UID:clean-report-${job.id}@cleanreport.app`,
      `DTSTART:${formatDate(startTime)}`,
      `DTEND:${formatDate(endTime)}`,
      `SUMMARY:${summary}`,
      `DESCRIPTION:${description}`,
      client?.address ? `LOCATION:${client.address}` : '',
      'TRANSP:OPAQUE',
      'STATUS:CONFIRMED',
      `CREATED:${formatDate(now)}`,
      `LAST-MODIFIED:${formatDate(now)}`,
      'SEQUENCE:0',
      'CATEGORIES:Work,Cleaning',
      'END:VEVENT'
    ].filter(Boolean).join('\r\n')
  }).filter(Boolean)

  return [...icalHeader, ...events, ...icalFooter].join('\r\n')
}