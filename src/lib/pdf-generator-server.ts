// Server-side only PDF generator using PDFKit
// This file should not be imported on the client side

import PDFDocument from 'pdfkit'

export interface ReportData {
  job: any
  tasks: any[]
  photos: any[]
  notes: any[]
  configuration: any
}

export async function generateServerPDF(reportData: ReportData): Promise<Buffer> {
  return new Promise((resolve, reject) => {
    try {
      console.log('Creating PDF document with PDFKit...')
      const doc = new PDFDocument({
        size: 'A4',
        margins: { top: 50, bottom: 50, left: 50, right: 50 }
      })

      const chunks: Buffer[] = []
      doc.on('data', chunk => chunks.push(chunk))
      doc.on('end', () => {
        console.log('PDF generation completed, buffer size:', Buffer.concat(chunks).length)
        resolve(Buffer.concat(chunks))
      })
      doc.on('error', (error) => {
        console.error('PDF generation error:', error)
        reject(error)
      })

      const { job, tasks, photos, notes, configuration } = reportData

      console.log('Adding content to PDF...')
      
      // Add header
      addHeader(doc, job, configuration)
      
      // Add job details
      addJobDetails(doc, job)
      
      // Add tasks section
      if (tasks && tasks.length > 0) {
        addTasksSection(doc, tasks)
      }
      
      // Add notes section
      if (notes && notes.length > 0) {
        addNotesSection(doc, notes)
      }
      
      // Add footer
      addFooter(doc, configuration)

      console.log('Ending PDF document...')
      doc.end()
    } catch (error) {
      console.error('Error in generateServerPDF:', error)
      reject(error)
    }
  })
}

function addHeader(doc: PDFKit.PDFDocument, job: any, config: any) {
  try {
    console.log('Adding header...')
    doc.fontSize(20)
      .fillColor(config?.primary_color || '#3B82F6')
      .text(config?.company_name || 'Your Company', 50, 50)

    doc.fontSize(16)
      .fillColor('#000')
      .text(`Job Report: ${job?.title || 'Untitled Job'}`, 50, 80)

    doc.fontSize(10)
      .text(`Generated: ${new Date().toLocaleDateString()}`, 50, 105)
  } catch (error) {
    console.error('Error in addHeader:', error)
    throw error
  }
}

function addJobDetails(doc: PDFKit.PDFDocument, job: any) {
  try {
    console.log('Adding job details...')
    let yPos = 130

    doc.fontSize(14).text('Job Details', 50, yPos)
    yPos += 20

    doc.fontSize(10)
    doc.text(`Client: ${job?.client?.name || 'N/A'}`, 50, yPos)
    yPos += 15
    doc.text(`Address: ${job?.client?.address || 'N/A'}`, 50, yPos)
    yPos += 15
    doc.text(`Status: ${job?.status || 'N/A'}`, 50, yPos)
    yPos += 15
    doc.text(`Scheduled: ${job?.scheduled_date ? new Date(job.scheduled_date).toLocaleDateString() : 'N/A'}`, 50, yPos)

    if (job?.description) {
      yPos += 20
      doc.text('Description:', 50, yPos)
      yPos += 15
      doc.text(job.description, 50, yPos, { width: 500 })
    }
  } catch (error) {
    console.error('Error in addJobDetails:', error)
    throw error
  }
}

function addTasksSection(doc: PDFKit.PDFDocument, tasks: any[]) {
  try {
    console.log('Adding tasks section...')
    let yPos = 300

    doc.fontSize(14).text('Tasks Completed', 50, yPos)
    yPos += 20

    tasks.forEach((task, index) => {
      if (yPos > 700) {
        doc.addPage()
        yPos = 50
      }

      doc.fontSize(12).text(`${index + 1}. ${task?.name || 'Unnamed Task'}`, 50, yPos)
      yPos += 15
      doc.fontSize(10).text(`Status: ${task?.status || 'Unknown'}`, 70, yPos)
      yPos += 12

      if (task?.description) {
        doc.text(task.description, 70, yPos, { width: 450 })
        yPos += 15
      }
      yPos += 10
    })
  } catch (error) {
    console.error('Error in addTasksSection:', error)
    throw error
  }
}

function addNotesSection(doc: PDFKit.PDFDocument, notes: any[]) {
  try {
    console.log('Adding notes section...')
    let yPos = 500

    doc.fontSize(14).text('Notes', 50, yPos)
    yPos += 20

    notes.forEach(note => {
      if (yPos > 700) {
        doc.addPage()
        yPos = 50
      }

      doc.fontSize(10)
        .text(note?.created_at ? new Date(note.created_at).toLocaleDateString() : '', 50, yPos)
      yPos += 12
      doc.text(note?.content || 'No content', 50, yPos, { width: 500 })
      yPos += 20
    })
  } catch (error) {
    console.error('Error in addNotesSection:', error)
    throw error
  }
}

function addFooter(doc: PDFKit.PDFDocument, config: any) {
  try {
    console.log('Adding footer...')
    doc.fontSize(8)
      .fillColor('#666')
      .text(`Generated by ${config?.company_name || 'Your Company'}`, 50, 750)
  } catch (error) {
    console.error('Error in addFooter:', error)
    throw error
  }
}